[{"/Users/mark/code/sprout-scientific-test/src/reportWebVitals.js":"1","/Users/mark/code/sprout-scientific-test/src/App.js":"2","/Users/mark/code/sprout-scientific-test/src/index.js":"3","/Users/mark/code/sprout-scientific-test/src/components/LinearProgressWithLabel.js":"4","/Users/mark/code/sprout-scientific-test/src/components/SubmissionsList.js":"5"},{"size":362,"mtime":1612148917000,"results":"6","hashOfConfig":"7"},{"size":6418,"mtime":1613098405000,"results":"8","hashOfConfig":"7"},{"size":500,"mtime":1612148917000,"results":"9","hashOfConfig":"7"},{"size":1494,"mtime":1613010321000,"results":"10","hashOfConfig":"7"},{"size":2850,"mtime":1613099077000,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1yt58gi",{"filePath":"14","messages":"15","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"/Users/mark/code/sprout-scientific-test/src/reportWebVitals.js",[],"/Users/mark/code/sprout-scientific-test/src/App.js",["23","24"],"/Users/mark/code/sprout-scientific-test/src/index.js",[],"/Users/mark/code/sprout-scientific-test/src/components/LinearProgressWithLabel.js",["25"],"/Users/mark/code/sprout-scientific-test/src/components/SubmissionsList.js",["26"],"import React from 'react'\nimport PropTypes from 'prop-types'\nimport { makeStyles } from '@material-ui/core/styles'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport Paper from '@material-ui/core/Paper'\nimport Grid from '@material-ui/core/Grid'\nimport Fade from '@material-ui/core/Fade'\n\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 550,\n  },\n  tablecell: {\n    fontSize: '0.6em',\n    textAlign: 'left'\n  },\n});\n\n\nexport default function SubmissionsList(props) {\n  const classes = useStyles()\n  const { error, items, isLoaded } = props\n  const hasNoSubmissions = items.length === 0 && isLoaded\n\n  const renderLoadingSpinner = () => (\n    <Grid container spacing={1}>\n      <Grid item xs={12}><CircularProgress size={20} /></Grid>\n      <Grid item xs={12}>Loading submissions...</Grid>\n    </Grid>\n  )\n\n  const renderTable = () => (\n    <Fade in={!!isLoaded} timeout={600}>\n      <TableContainer component={Paper}>\n        <Table className={classes.table} size=\"small\" aria-label=\"submission list\">\n          <TableHead>\n            <TableRow>\n              <TableCell className={classes.tablecell} style={{ width: '5%' }} >ID</TableCell>\n              <TableCell className={classes.tablecell} align=\"right\">email</TableCell>\n              <TableCell className={classes.tablecell} align=\"right\">file name</TableCell>\n              <TableCell className={classes.tablecell} align=\"right\">create at</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {items.map((row) => (\n              <TableRow key={row.id} >\n                <TableCell className={classes.tablecell} style={{ width: '5%' }}>{row.id}</TableCell>\n                <TableCell className={classes.tablecell} align=\"right\">{row.email}</TableCell>\n                <TableCell className={classes.tablecell} align=\"right\">{row.file_name}</TableCell>\n                <TableCell className={classes.tablecell} align=\"right\">{new Date(`${row.created_at} UTC`).toLocaleString()}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Fade>\n  )\n\n  const renderContent = () => {\n    if (error) {\n      return <Grid item xs={12}>Error: {error.message}</Grid>\n    }\n    else if (!isLoaded) {\n      return renderLoadingSpinner()\n    }\n    else if (hasNoSubmissions) {\n      return <Grid item xs={12}>No submissions yet. Enter an email and add a file.</Grid >\n    }\n    else {\n      return renderTable()\n    }\n  }\n\n  return (\n    renderContent()\n  )\n}",{"ruleId":"27","severity":1,"message":"28","line":4,"column":57,"nodeType":"29","messageId":"30","endLine":4,"endColumn":73},{"ruleId":"27","severity":1,"message":"31","line":23,"column":9,"nodeType":"29","messageId":"30","endLine":23,"endColumn":27},{"ruleId":"27","severity":1,"message":"32","line":3,"column":10,"nodeType":"29","messageId":"30","endLine":3,"endColumn":20},{"ruleId":"27","severity":1,"message":"33","line":2,"column":8,"nodeType":"29","messageId":"30","endLine":2,"endColumn":17},"no-unused-vars","'CircularProgress' is defined but never used.","Identifier","unusedVar","'handleServerErrors' is assigned a value but never used.","'makeStyles' is defined but never used.","'PropTypes' is defined but never used."]